const hana = require("@sap/hana-client");
const { connection } = require("../config/dbConfig");

const createTable = async () => {
  const query = `
    CREATE TABLE "DBADMIN"."orders" (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INTEGER NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES "DBADMIN"."users"(id)
);
  `;

  try {
    await connection.exec(query);
    console.log("Order table created successfully");
  } catch (error) {
    if (error.code === 288) {
      console.log("Order table already exists. Initialization skipped.");
    } else {
      console.error("Error initializing database:", error.message);
      throw error;
    }
  }
};

const getAllOrders = async () => {
  try {
    const query = `SELECT * FROM "DBADMIN"."orders"`;
    return connection.exec(query);
  } catch (error) {
    console.log(error);
  }
};

const getOrderById = async (id) => {
  const query = `SELECT * FROM "DBADMIN"."orders" WHERE id = ?`;
  return connection.prepare(query).exec([id]);
};

const createOrder = async (firstName, lastName, email) => {
  const query = `INSERT INTO "DBADMIN"."orders" (first_name, last_name, email) VALUES (?, ?, ?)`;
  return connection.prepare(query).exec([firstName, lastName, email]);
};

const updateOrder = async (id, firstName, lastName, email) => {
  const query = `UPDATE "DBADMIN"."orders" SET first_name = ?, last_name = ?, email = ? WHERE id = ?`;
  return connection.prepare(query).exec([firstName, lastName, email, id]);
};

const deleteOrder = async (id) => {
  const query = `DELETE FROM "DBADMIN"."orders" WHERE id = ?`;
  return connection.prepare(query).exec([id]);
};

module.exports = {
  getAllOrders,
  getOrderById,
  createOrder,
  updateOrder,
  deleteOrder,
  createTable,
};
